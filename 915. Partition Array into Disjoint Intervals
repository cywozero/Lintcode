'''
Given an array A, partition it into two (contiguous) subarrays left and right so that:

Every element in left is less than or equal to every element in right.
left and right are non-empty.
left has the smallest possible size.
Return the length of left after such a partitioning.  It is guaranteed that such a partitioning exist
'''


class Solution:
    def partitionDisjoint(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        disjoint = 0
        v =A[disjoint]
        max_so_far = v
        for i in range(len(A)):
            max_so_far = max(max_so_far,A[i])
            if A[i]<v:
                disjoint = i
                v = max_so_far
        return disjoint +1
